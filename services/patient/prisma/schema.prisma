generator client {
  provider      = "prisma-client-js"
  engineType    = "library"
  binaryTargets = ["native"]
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../lib/schema" // default is ./generated/zod
  useMultipleFiles                 = false // default is false
  writeBarrelFiles                 = false // default is true
  createInputTypes                 = true // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = true // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = true // default is false
  prismaClientPath                 = "@prisma/client" // default is client output path
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                String      @id @default(uuid())
  gender            Gender
  first_name        String?
  last_name         String?
  qr_number         String?
  age               Int?
  birthday          String?
  id_card           String?
  tel               String?
  address           String?
  group_blood       GroupBlood?
  image             String?
  image_id_card     String?
  create_by    String?
  update_by    String?
  date_time_died    DateTime? //วันที่เวลาเสียชีวิต
  date_time_go_home DateTime? //วันที่กลับบ้านห
  date_time_lost    DateTime? //วันที่สูยหายจากการรักษา
  date_time_refer   DateTime? //วันที่ี่ส่งไปที่อื่น

  create_date DateTime? @default(now())
  update_date DateTime? @updatedAt
  delete_date DateTime?

}

enum GroupBlood {
  A
  B
  AB
  O
}

enum Gender {
  Male
  Female
}
