generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./../src/core/types/schema/prisma" // default is ./generated/zod
  useMultipleFiles                 = false // default is false
  writeBarrelFiles                 = false // default is true
  createInputTypes                 = true // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = true // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = true // default is false
  prismaClientPath                 = "@prisma/client" // default is client output path
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mission {
  id            String          @id @default(uuid())
  status        MissionStatus   @default(Pending)
  title         String          @unique
  case_number   String?
  description   String?
  end_date      DateTime?
  address       String?
  image         String?
  lat           String?
  long          String?
  utm           String?
  mgrs          String?
  create_date   DateTime?       @default(now())
  update_date   DateTime?       @updatedAt
  delete_date   DateTime?
  SubMission    SubMission[]
  Joiners       Joiner[]
  HistoryJoiner HistoryJoiner[]
  Patient       Patient[]

  @@index([id])
  @@index([status])
  @@index([title])
  @@index([create_date])
}

model Joiner {
  id          String    @id @default(uuid())
  mission_id  String
  user_id     String
  Mission     Mission   @relation(fields: [mission_id], references: [id])
  create_date DateTime? @default(now())
  update_date DateTime? @updatedAt

  @@unique([mission_id, user_id])
  @@index([mission_id, user_id])
  @@index([user_id])
}

model Patient {
  id          String    @id @default(uuid())
  mission_id  String
  patient_id  String
  Mission     Mission   @relation(fields: [mission_id], references: [id])
  create_date DateTime? @default(now())
  update_date DateTime? @updatedAt

  @@unique([mission_id, patient_id])
  @@index([mission_id, patient_id])
  @@index([patient_id])
}

model HistoryJoiner {
  id          String    @id @default(uuid())
  mission_id  String
  user_id     String
  Mission     Mission   @relation(fields: [mission_id], references: [id])
  create_date DateTime? @default(now())
  update_date DateTime? @updatedAt

  @@index([mission_id, user_id])
  @@index([user_id])
  @@index([mission_id])
}

model SubMission {
  id         String  @id @default(uuid())
  mission_id String
  Mission    Mission @relation(fields: [mission_id], references: [id])
  vehicle_id String
  patient_id String

  create_date  DateTime?       @default(now())
  update_date  DateTime?       @updatedAt
  delete_date  DateTime?
  SubMissioTag SubMissionTag[]

  @@unique([patient_id, mission_id, vehicle_id])
  @@index([patient_id, mission_id, vehicle_id])
  @@index([patient_id, mission_id])
  @@index([patient_id])
}

model SubMissionTag {
  id             String     @id @default(uuid())
  title          String
  sub_mission_id String
  SubMission     SubMission @relation(fields: [sub_mission_id], references: [id])
  date_time      DateTime   @default(now())

  create_date DateTime? @default(now())
  update_date DateTime? @updatedAt
  delete_date DateTime?

  @@unique([title, sub_mission_id])
  @@index([title])
  @@index([sub_mission_id])
}

enum MissionStatus {
  Pending
  Progress
  Completed
  Close
  Cancel
}
